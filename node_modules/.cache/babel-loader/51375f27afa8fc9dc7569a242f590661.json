{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Minnie\\\\VSCode Workspace\\\\hooks-project\\\\side-effects-reducers-contextapi-project\\\\src\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //Takes in a default context i.e App or your component wide state. usually tho its an object. We\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {} //Giving it a dummy function for better IDE auto completion.\n\n});\nexport const AuthContextProvider = () => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false); //After every component evaluation then this will run.\n\n  useEffect(() => {\n    const storedUserLoggedInInfo = localStorage.getItem('isLoggedIn');\n\n    if (storedUserLoggedInInfo === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []); //Will only run once because the dependencies in the [] will never change as no dependencies have been declared.\n  ///Once weve logged in even if we refresh it stays logged in.\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  const loginHandler = () => {\n    //Store data in local storeage in brower.\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: loginHandler,\n      onLogin: loginHandler\n    },\n    children: AuthContext.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext; //To use Context in your applicaiton you need to provide it (All components that are wrapped by it should have access to it) \n// and then consume it (hook into it, listen to it). \n//In most cases you will use props to pass data to components because props allows you to configure components and make them reuseable. \n// Only if you have something which you would foward through a lot of components would you use Reacts Context API. \n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","setIsLoggedIn","storedUserLoggedInInfo","localStorage","getItem","logoutHandler","removeItem","loginHandler","setItem","children"],"sources":["C:/Users/Minnie/VSCode Workspace/hooks-project/side-effects-reducers-contextapi-project/src/store/auth-context.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n\r\n//Takes in a default context i.e App or your component wide state. usually tho its an object. We\r\nconst AuthContext = React.createContext({\r\n    isLoggedIn: false,\r\n    onLogout: () => {},\r\n    onLogin: (email, password) => {}\r\n    //Giving it a dummy function for better IDE auto completion.\r\n});\r\n\r\nexport const AuthContextProvider = () => {\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    //After every component evaluation then this will run.\r\n    useEffect(() => {\r\n        const storedUserLoggedInInfo = localStorage.getItem('isLoggedIn');\r\n\r\n    if (storedUserLoggedInInfo === '1') {\r\n        setIsLoggedIn(true);\r\n    }\r\n    }, []);\r\n  //Will only run once because the dependencies in the [] will never change as no dependencies have been declared.\r\n  ///Once weve logged in even if we refresh it stays logged in.\r\n\r\n    const logoutHandler = () => {\r\n        localStorage.removeItem('isLoggedIn');\r\n        setIsLoggedIn(false);\r\n    };\r\n\r\n    const loginHandler =() => {\r\n        //Store data in local storeage in brower.\r\n    localStorage.setItem('isLoggedIn', '1')\r\n        setIsLoggedIn(true);\r\n    };\r\n\r\n    return (\r\n    <AuthContext.Provider \r\n        value={{\r\n            isLoggedIn: isLoggedIn, \r\n            onLogout: loginHandler, \r\n            onLogin: loginHandler\r\n        }}\r\n    >\r\n        {AuthContext.children}\r\n    </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthContext;\r\n\r\n//To use Context in your applicaiton you need to provide it (All components that are wrapped by it should have access to it) \r\n// and then consume it (hook into it, listen to it). \r\n\r\n//In most cases you will use props to pass data to components because props allows you to configure components and make them reuseable. \r\n// Only if you have something which you would foward through a lot of components would you use Reacts Context API. "],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC,C,CAEA;;;AACA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;EACpCC,UAAU,EAAE,KADwB;EAEpCC,QAAQ,EAAE,MAAM,CAAE,CAFkB;EAGpCC,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE,CAHI,CAIpC;;AAJoC,CAApB,CAApB;AAOA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;EAAA;;EAErC,MAAM,CAACL,UAAD,EAAaM,aAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C,CAFqC,CAIrC;;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMU,sBAAsB,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAA/B;;IAEJ,IAAIF,sBAAsB,KAAK,GAA/B,EAAoC;MAChCD,aAAa,CAAC,IAAD,CAAb;IACH;EACA,CANQ,EAMN,EANM,CAAT,CALqC,CAYvC;EACA;;EAEE,MAAMI,aAAa,GAAG,MAAM;IACxBF,YAAY,CAACG,UAAb,CAAwB,YAAxB;IACAL,aAAa,CAAC,KAAD,CAAb;EACH,CAHD;;EAKA,MAAMM,YAAY,GAAE,MAAM;IACtB;IACJJ,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC;IACIP,aAAa,CAAC,IAAD,CAAb;EACH,CAJD;;EAMA,oBACA,QAAC,WAAD,CAAa,QAAb;IACI,KAAK,EAAE;MACHN,UAAU,EAAEA,UADT;MAEHC,QAAQ,EAAEW,YAFP;MAGHV,OAAO,EAAEU;IAHN,CADX;IAAA,UAOKd,WAAW,CAACgB;EAPjB;IAAA;IAAA;IAAA;EAAA,QADA;AAWH,CArCM;;GAAMT,mB;;KAAAA,mB;AAuCb,eAAeP,WAAf,C,CAEA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}