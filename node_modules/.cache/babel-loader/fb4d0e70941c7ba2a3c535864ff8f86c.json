{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Minnie\\\\VSCode Workspace\\\\hooks-project\\\\side-effects-reducers-contextapi-project\\\\src\\\\store\\\\auth-context.js\";\nimport React, { useState } from \"react\"; //Takes in a default context i.e App or your component wide state. usually tho its an object. We\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {} //Giving it a dummy function for better IDE auto completion.\n\n});\nexport const AuthContextProvider = () => {\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    children: AuthContext.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 12\n  }, this);\n};\n_c = AuthContextProvider;\nexport default AuthContext; //To use Context in your applicaiton you need to provide it (All components that are wrapped by it should have access to it) \n// and then consume it (hook into it, listen to it). \n//In most cases you will use props to pass data to components because props allows you to configure components and make them reuseable. \n// Only if you have something which you would foward through a lot of components would you use Reacts Context API. \n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","AuthContext","createContext","isLoggedIn","onLogout","AuthContextProvider","children"],"sources":["C:/Users/Minnie/VSCode Workspace/hooks-project/side-effects-reducers-contextapi-project/src/store/auth-context.js"],"sourcesContent":["import React, {useState} from \"react\";\r\n\r\n//Takes in a default context i.e App or your component wide state. usually tho its an object. We\r\nconst AuthContext = React.createContext({\r\n    isLoggedIn: false,\r\n    onLogout: () => {}\r\n    //Giving it a dummy function for better IDE auto completion.\r\n});\r\n\r\nexport const AuthContextProvider = () => {\r\n    return <AuthContext.Provider>{AuthContext.children}</AuthContext.Provider>\r\n}\r\n\r\nexport default AuthContext;\r\n\r\n//To use Context in your applicaiton you need to provide it (All components that are wrapped by it should have access to it) \r\n// and then consume it (hook into it, listen to it). \r\n\r\n//In most cases you will use props to pass data to components because props allows you to configure components and make them reuseable. \r\n// Only if you have something which you would foward through a lot of components would you use Reacts Context API. "],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B,C,CAEA;;;AACA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;EACpCC,UAAU,EAAE,KADwB;EAEpCC,QAAQ,EAAE,MAAM,CAAE,CAFkB,CAGpC;;AAHoC,CAApB,CAApB;AAMA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;EACrC,oBAAO,QAAC,WAAD,CAAa,QAAb;IAAA,UAAuBJ,WAAW,CAACK;EAAnC;IAAA;IAAA;IAAA;EAAA,QAAP;AACH,CAFM;KAAMD,mB;AAIb,eAAeJ,WAAf,C,CAEA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"module"}